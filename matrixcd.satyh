@require: list
@require: base/list-ext
@require: base/length
@require: gr
@require: color

module MatrixCD : sig
  type label-option
  type arrow-option
  type matrixcd-option
  val \matrixcd : [(matrixcd-option list)?; inline-text list] math-cmd
  val \matrixcd-t : [(matrixcd-option list)?; inline-text list] inline-cmd
  val \matrixcd-m : [(matrixcd-option list)?; inline-text list] math-cmd
  val \arrow : [arrow-option list] inline-cmd
  val \cr : [] inline-cmd
  val to : string -> arrow-option
  val from : string -> arrow-option
  val arrow-out : float -> arrow-option
  val arrow-in : float -> arrow-option
  val phantom : arrow-option
  val equal : arrow-option
  val arrow-color : color -> arrow-option
  val crossing-over : arrow-option
  val dotted : arrow-option
  val dashed : arrow-option
  val mapsto : arrow-option
  val hook : arrow-option
  val hook-swap : arrow-option
  val shift : (length * length) -> arrow-option
  val shift-in : (length * length) -> arrow-option
  val shift-out : (length * length) -> arrow-option
  val label : label-option list ?-> inline-text -> arrow-option
  val label-color : color -> label-option
  val swap : label-option
  val description : label-option
  val pos : float -> label-option
  val row-sep : length -> matrixcd-option
  val column-sep : length -> matrixcd-option

end = struct

type label-data = (|
  text : inline-text;
  swap : bool;
  position : float;
  color : color;
  description : bool;
|)

type label-option = label-data -> label-data
type arrow-angle = 
  |AbsoluteAngle of float
  |RelativeAngle of float

type matrixcd-data = (|
  row-sep : length;
  column-sep : length;
|)
type matrixcd-option = matrixcd-data -> matrixcd-data

type arrow-option-data = (|
  color : color;
  thickness : length;
  % 度数法……
  angle-in : arrow-angle;
  angle-out : arrow-angle;
  shift : length * length;
  shift-in : length * length;
  shift-out : length * length;
  phantom : bool;
|)

type arrow-data = (|
  direction-to : int * int;
  direction-from : int * int;
  label : label-data list;
  arrow-options : arrow-option-data;
  crossing-over : bool;
  arrow-tail : arrow-option-data -> length * length -> length * length -> context -> (length * length) * graphics list;
  arrow-head  : arrow-option-data -> length * length -> length * length -> context -> (length * length) * graphics list;
  arrow-body  : arrow-option-data -> length * length -> length * length -> context -> graphics list;
  label-position : arrow-option-data -> length * length -> length * length -> float -> (length * length) * (length * length);
|)

type arrow-option = arrow-data -> arrow-data

% \arrow / \crで指定された内容を一時的に格納する
let-mutable ref-arrows <- []
let-mutable ref-cr <- false

% helpers
let sqrt x =
  let-rec aux y n =
    if n == 0 then y
    else aux ((y +. (x /. y)) *. 0.5) (n - 1)
  in
  aux x 10
let to-radian angle = angle *. 3.14159 /. 180.0
let rotate (x,y) angle = (
  (x *' (cos angle) -' y *' (sin angle)),
  (x *' (sin angle) +' y *' (cos angle))
)

let abs-length a = if a <' 0pt then 0pt -' a else a
let sgn-length a = if a <' 0pt then (0.0-.1.0) else 1.0
let abs-float a = if (1.0pt *' a) <' 0.0pt then 0.0 -. a else a

% drawing arrows
let normal-label-position opt (startx,starty) (endx,endy) position =
  ((
    startx *' (1.0 -. position) +' endx *' position,
    starty *' (1.0 -. position) +' endy *' position
  ),((endx -' startx),(endy -'starty)))

% tailとheadはどこまで描いたかを返す．bodyにはこれらの点が始点・終点として渡される．
let normal-arrow-tail opt startpt endpt ctx = (startpt,[])
let none-arrow-tail = normal-arrow-tail
let mapsto-arrow-tail opt (startx,starty) (endx,endy) ctx =
  let size = 2.5pt in
  let (x-f,y-f) = 
    match opt#angle-out with
    | AbsoluteAngle(a) -> (0.0 -. (sin (to-radian a)),cos (to-radian a))
    | RelativeAngle(a) -> 
      let (x,y) = rotate (endx -' startx,endy -' starty) (to-radian (90.0 +. a)) in
      (Length.to-float x, Length.to-float y)
  in
  let d = sqrt (x-f *. x-f +. y-f *. y-f) in
  ((startx,starty),[
    stroke opt#thickness opt#color
      (start-path (startx +' size *' (x-f /. d), starty +' size *' (y-f /. d))
        |> line-to (startx -' size *' (x-f /. d), starty -' size *' (y-f /. d))
        |> terminate-path
      )
  ])
let hook-arrow-tail swap opt (startx,starty) (endx,endy) ctx =
  let radius = 1.5pt in
  let (x,y) =
    match opt#angle-out with
    | AbsoluteAngle(a) -> (0pt -' radius *' cos (to-radian a),0pt -' radius *' sin (to-radian a))
    | RelativeAngle(a) -> 
      let (c,d) = rotate (startx -' endx,starty -' endy) (to-radian a) in
      let (x-f,y-f) = (Length.to-float c, Length.to-float d) in
      let d = sqrt (x-f *. x-f +. y-f *. y-f) in
      (radius *' (x-f /. d), radius *' (y-f /. d))
  in
  let (cx,cy) = if swap then (startx +' x  +' y, starty +' y -' x) else (startx +' x  -' y, starty +' y +' x) in
  let (tx,ty) = (x *' 0.55228, y *' 0.55228) in
  let path = start-path (cx +' y,cy -' x)
     |> bezier-to (cx +' y -' tx, cy -' x -' ty) (cx -' x +' ty, cy -' y -' tx) (cx -' x,cy -' y)
     |> bezier-to (cx -' x -' ty,cy -' y +' tx) (cx -' y -' tx,cy +' x -' ty) (cx -' y, cy +' x)
     |> terminate-path
  in
  ((startx +' x,starty +' y),[stroke opt#thickness opt#color path])

let normal-arrow-head opt (startx,starty) (endx,endy) ctx = 
  let (x-f,y-f) = 
    match opt#angle-in with
    | RelativeAngle(a) ->
      let (x,y) = rotate (startx -' endx,starty -' endy) a in
      (Length.to-float x,Length.to-float y)
    | AbsoluteAngle(a) -> (cos (to-radian a),sin (to-radian a))
  in
  let d = sqrt (x-f *. x-f +. y-f *. y-f) in
  let pos = opt#thickness in
  let arstpt = (endx +' pos *' (x-f /. d),endy +' pos *' (y-f /. d)) in
  (arstpt,(Gr.arrow opt#thickness opt#color 4pt 1pt 4pt arstpt (endx,endy)))
let none-arrow-head opt startpt endpt ctx = (endpt,[])

let normal-arrow-body opt startpt endpt ctx = [stroke opt#thickness opt#color (Gr.line startpt endpt)]
let dashed-arrow-body pattern opt startpt endpt ctx = [dashed-stroke opt#thickness pattern opt#color (Gr.line startpt endpt)]
let none-arrow-body opt startpt endpt ctx = []

let label ?:option it t = 
  let default-label = (|
    text = it;
    swap = false;
    position = 0.5;
    color = Color.black;
    description = false;
  |) in
  let s = Option.from [] option in
  let l = List.fold-left (fun lab f -> (f lab)) default-label s in
  (|t with label = l :: t#label;|)

% options for arrows/labels
% レコードを更新していく形の関数で定める．
let swap t = (|t with swap = true;|)
let pos p t = (|t with position = p;|)
let description t = (|t with description = true;|)

let-rec analyze-position s def = 
  let len = string-length s in
  if len == 0 then def else
    let last-char = string-sub s (len - 1) 1 in
    let (x,y) = analyze-position (string-sub s 0 (len - 1)) def in
    match last-char with
      |`r` -> (x + 1,y)
      |`l` -> (x - 1,y)
      |`d` -> (x,y + 1)
      |`u` -> (x,y - 1)
      |_ -> (x,y)

let to s t = (|t with direction-to = (analyze-position s t#direction-to);|)
let from s t = (|t with direction-from = (analyze-position s t#direction-from);|)

let arrow-out a t = (|t with arrow-options = (|t#arrow-options with angle-out = AbsoluteAngle(a);|)|)
let arrow-in a t = (|t with arrow-options = (|t#arrow-options with angle-in = AbsoluteAngle(a);|)|)

let shift p t = (|t with arrow-options = (|t#arrow-options with shift = p;|);|)
let shift-in p t = (|t with arrow-options = (|t#arrow-options with shift-in = p;|);|)
let shift-out p t = (|t with arrow-options = (|t#arrow-options with shift-out = p;|);|)

let phantom t = (|t with 
  arrow-tail = none-arrow-tail;
  arrow-head = none-arrow-head;
  arrow-body = none-arrow-body;
  arrow-options = (|t#arrow-options with phantom = true;|)
|)

let crossing-over t = (|t with crossing-over = true;|)
let arrow-color c t = (|t with arrow-options = (|t#arrow-options with color = c;|);|)
let label-color c t = (|t with color = c;|)

let equal t = (|t with arrow-head = none-arrow-head;|)
let dotted t = 
  (|t with 
    arrow-body = (fun opt -> dashed-arrow-body (opt#thickness,2pt,0pt) opt);
    label-position = normal-label-position;
  |)
let dashed t = 
  (|t with
    arrow-body = (fun opt -> dashed-arrow-body (1pt,3pt,0pt) opt);
    label-position = normal-label-position;
  |)
let mapsto t = (|t with arrow-tail = mapsto-arrow-tail;|)
let hook t = (|t with arrow-tail = (hook-arrow-tail false);|)
let hook-swap t = (|t with arrow-tail = (hook-arrow-tail true);|)

let row-sep l t = (|t with row-sep = l;|)
let column-sep l t = (|t with column-sep = l;|)

let arrow-scheme default opts =
  let r = List.fold-left (fun t f -> (f t)) default opts in
  ref-arrows <- r :: !ref-arrows

let arrow = arrow-scheme (|
    direction-to = (0,0);
    direction-from = (0,0);
    label = [];
    arrow-options = (|
      color = Color.black;
      thickness = 0.5pt;
      angle-in = RelativeAngle(0.0);
      angle-out = RelativeAngle(180.0);
      shift = (0pt,0pt);
      shift-in = (0pt,0pt);
      shift-out = (0pt,0pt);
      phantom = false;
    |);
    crossing-over = false;
    arrow-tail = normal-arrow-tail;
    arrow-head = normal-arrow-head;
    arrow-body = normal-arrow-body;
    label-position = normal-label-position;
  |)


let-inline ctx \arrow opts =
  let () = arrow opts in
  inline-nil

let-inline ctx \cr =
  let () = ref-cr <- true in
  inline-nil

let add-to-column obj lst =
  let o = List.last lst in
  let rest = List.init lst in
  let newo = match o with
    | None -> [obj]
    | Some(oo) -> (List.append oo [obj])
  in
  match rest with
    | None -> [newo]
    | Some(r) -> (List.append r [newo])

let add-to-row obj lst = (List.append lst [[obj]])

let draw-label ctx (posx,posy) (dirx,diry) label arrow-options =
  let font-size = (get-font-size ctx) *' (if arrow-options#phantom then 1.0 else 0.7) in
  let lit = read-inline (ctx
    |> set-font-size font-size
    |> set-text-color label#color
  ) label#text in
  let (width,height,depth) = get-natural-metrics lit in
  let (x,y) = 
    if label#description || arrow-options#phantom then
      (posx -' (width *' 0.5), posy -' ((height -' depth) *' 0.5))
    else
      let diffx = (if label#swap then (0.0 -. 1.0) else 1.0) *. Length.to-float dirx in
      let diffy = (if label#swap then (0.0 -. 1.0) else 1.0) *. Length.to-float diry in
      let distance = sqrt ((diffx *. diffx) +. (diffy *. diffy)) in
      let shiftx =
        (3pt *' diffy *. (0.0 -. 1.0) *. (1.0 /. distance)) -' (
          if ((not label#swap) && (diry <' 0pt) || ((label#swap) && (diry >' 0pt))) then 0pt
          else width
        )
      in
      let shifty = 
        (3pt *' diffx *. (1.0 /.  distance)) +' (
          if (not label#swap) && (dirx >' 0pt) || ((label#swap) && (dirx <' 0pt)) then depth
          else (0pt -'height)
        )
      in
      % 法線上に中心が来るように
      let a = shiftx +' (width *' 0.5) in
      let b = shifty +' (height -' depth) *' 0.5 in
      let t = 0pt -' ((a *' diffx +' b *' diffy) *' (1.0 /. (distance *. distance))) in
      let adjustx = t *' diffx in
      let adjusty = t *' diffy in
      (posx +' shiftx +' adjustx, posy +' shifty +' adjusty)
  in
  let draw-graphic = [draw-text (x,y) lit] in
  let padding = 2pt in
  let description-graphic = 
    if label#description then
      [fill Color.white (
        start-path (x -' padding, y -' depth -' padding)
          |> line-to (x +' width +' padding, y -' depth -' padding)
          |> line-to (x +' width +' padding, y +' height +' padding)
          |> line-to (x -' padding, y +' height +' padding)
          |> close-with-line
      )]
    else []
  in
  List.append description-graphic draw-graphic

let draw-crossing-over ctx (startx,starty) (endx,endy) =
  let x-f = Length.to-float (endx -' startx) in
  let y-f = Length.to-float (endy -' starty) in
  let d = sqrt ((x-f *. x-f) +. (y-f *. y-f)) in
  let (startx1,starty1) = (startx +' 3pt *' ((0.0 -. y-f) *. (1.0 /. d)), starty +' 3pt *' (x-f *. (1.0 /. d))) in
  let (startx2,starty2) = (startx +' 3pt *' (y-f *. (1.0 /. d)), starty +' 3pt *' ((0.0 -. x-f) *. (1.0 /. d))) in
  let (endx1,endy1) = (endx +' 3pt *' ((0.0 -. y-f) *. (1.0 /. d)), endy +' 3pt *' (x-f *. (1.0 /. d))) in
  let (endx2,endy2) = (endx +' 3pt *' (y-f *. (1.0 /. d)), endy +' 3pt *' ((0.0 -. x-f) *. (1.0 /. d))) in
  [fill Color.white (
    start-path (startx1,starty1) 
      |> line-to (startx2,starty2)
      |> line-to (endx2,endy2)
      |> line-to (endx1,endy1)
      |> close-with-line
  )]

let draw-each-arrow ctx (startx,starty) (endx,endy) arrow-data lab =
  let (shift-startx,shift-starty) = arrow-data#arrow-options#shift-out in
  let (shift-endx,shift-endy) = arrow-data#arrow-options#shift-in in
  let startpt = (startx +' shift-startx,starty +' shift-starty) in
  let endpt = (endx +' shift-endx,endy +' shift-endy) in
  let arrow-graphics =
    let (tailpt,tail) = arrow-data#arrow-tail arrow-data#arrow-options startpt endpt ctx in
    let (headpt,head) = arrow-data#arrow-head arrow-data#arrow-options startpt endpt ctx in
    let body = arrow-data#arrow-body arrow-data#arrow-options tailpt headpt ctx in
    List.append (List.append tail body) head
  in
  let crossing-over-graphics = 
    if arrow-data#crossing-over then draw-crossing-over ctx startpt endpt 
    else []
  in
  let label-graphics = List.fold-left 
    (fun lst l -> (
      let (pospt,dir) = arrow-data#label-position arrow-data#arrow-options startpt endpt l#position in
      List.append (draw-label ctx pospt dir l arrow-data#arrow-options) lst
    ))
  [] lab in
  List.map (fun g -> (shift-graphics arrow-data#arrow-options#shift g))
    (List.append (List.append crossing-over-graphics arrow-graphics) label-graphics)


let get-boundary-point (x,y) (obj-width,obj-height) (dirx,diry) =
  let dirx-f = Length.to-float dirx in
  let diry-f = Length.to-float diry in
  let d = sqrt (dirx-f *. dirx-f +. diry-f *. diry-f) in
  if Length.(dirx == 0pt) then 
    (x,y +' ((obj-height *' 0.5) *' (sgn-length diry)))
  else if Length.(diry == 0pt) then
    (x +' (obj-width *' 0.5 *. (sgn-length dirx)),y)
  else
    let point-slope = diry /' dirx in
    let obj-slope = obj-height /' obj-width in
    if Float.((abs-float point-slope) > (abs-float obj-slope)) then
      (
        x +' (obj-height *' 0.5 *. (1.0 /. point-slope) *. (sgn-length diry)),
        y +' (obj-height *' 0.5 *. (sgn-length diry))
      )
    else
      (
        x +' (obj-width *' 0.5 *. (sgn-length dirx)),
        y +' (obj-width *' 0.5 *. point-slope *. (sgn-length dirx))
      )

% 横方向みたいな変数名……
let get-center coordlist padding index = 
  let left-c = Option.from 0pt (List.nth index coordlist) in
  let right-c = Option.from 0pt (List.nth (index + 1) coordlist) in
  let (left-p,right-p) = padding in
  (right-c +' left-c +' left-p -' right-p) *' 0.5

let get-metric-from-list x y metric-list =
  match (List.nth y metric-list) with
  |None -> None
  |Some(c) -> (List.nth x c)

let draw-arrows ctx coordxlist coordylist hor-padding-list ver-padding-list metric-list arrow-list =
  let object-margin = 10pt in
  List.fold-left (fun lst t -> (
    let (startx,starty) = t#direction-from in
    let (endx,endy) = t#direction-to in
    let get-padding-from-list p-list x y =
      Option.from (0pt,0pt) (List.nth x (
        Option.from [] (List.nth y p-list)
      ))
    in
    let (start-width,start-ht,start-depth) = Option.from (0pt,0pt,0pt) (get-metric-from-list startx starty metric-list) in
    let (end-width,end-ht,end-depth) = Option.from (0pt,0pt,0pt) (get-metric-from-list endx endy metric-list) in
    let start-height = start-ht +' start-depth in
    let end-height = end-ht +' end-depth in
    let start-centerx = get-center coordxlist (get-padding-from-list hor-padding-list startx starty) startx in
    let (start-padding-v-b,start-padding-v-t) = (get-padding-from-list ver-padding-list startx starty) in
    let (end-padding-v-b,end-padding-v-t) = (get-padding-from-list ver-padding-list endx endy) in
    let start-centery = (Option.from 0pt (List.nth (starty + 1) coordylist)) 
      +' (start-height *' 0.5) +' start-padding-v-b in
    let end-centerx = get-center coordxlist (get-padding-from-list hor-padding-list endx endy) endx in
    let end-centery = (Option.from 0pt (List.nth (endy + 1) coordylist))
      +' (end-height *' 0.5) +' end-padding-v-b in
    let direction-vector = (start-centerx -' end-centerx, start-centery -' end-centery) in
    let direction-out = 
      match t#arrow-options#angle-out with
      | RelativeAngle(a) -> rotate direction-vector (to-radian a)
      | AbsoluteAngle(a) -> (1pt *' cos (to-radian a),1pt *' sin (to-radian a))
    in
    let direction-in = 
      match t#arrow-options#angle-in with
      | RelativeAngle(a) -> rotate direction-vector (to-radian a)
      | AbsoluteAngle(a) -> (1pt *' cos (to-radian a),1pt *' sin (to-radian a))
    in
    let (arrow-start-x,arrow-start-y) = 
      get-boundary-point (start-centerx,start-centery) (start-width +' object-margin,start-height +' object-margin) direction-out
    in
    let (arrow-end-x,arrow-end-y) = 
      get-boundary-point (end-centerx,end-centery) (end-width +' object-margin,end-height +' object-margin)  direction-in
    in
    List.append lst (draw-each-arrow ctx (arrow-start-x,arrow-start-y) (arrow-end-x,arrow-end-y) t t#label)
  )) [] arrow-list

let make-padding-of-last-row-zero t-list =
  match List.last t-list with
  | None -> [[]]
  | Some(last-column) ->
    let last-cell = 
      match List.last last-column with
      | None -> []
      | Some((pad-l,pad-r,pad-t,pad-b),ib) -> [((pad-l,0pt,pad-t,0pt),ib)]
    in
    let last-cell-column =
      match List.init last-column with
      | None -> last-cell
      | Some(l) -> List.append 
        (List.map (fun ((pad-l,pad-r,pad-t,pad-b),ib) -> ((pad-l,pad-r,pad-t,0pt),ib)) l)
        last-cell
    in
    match List.init t-list with
    | None -> [last-cell-column]
    | Some(l) -> List.append l [last-cell-column]


%let l2s l = Float.to-string (Length.to-float l)
%let out-padding (p-l,p-r,p-t,p-b) = 
%   display-message (`(` ^ (l2s p-l) ^ `pt, ` ^ (l2s p-r) ^ `pt, ` ^ (l2s p-t) ^ `pt, ` ^ (l2s p-b) ^ `pt)`)

let matrixcd ctx os lst =
  let default-options = (|
    row-sep = 40pt;
    column-sep = 40pt;
  |) in
  let opts = List.fold-left (fun t f -> (f t)) default-options (Option.from [] os) in
  let (table-list,arrow-list,_,_) = List.fold-left (fun (t-list,a-list,(x,y),cr) it -> (
    let () = ref-arrows <- [] in
    let () = ref-cr <- false in 
    let ib = read-inline ctx it in
    let next-cr = !ref-cr in
    let new-t-list =
      if cr then (add-to-row ib t-list)
      else (add-to-column ib t-list)
    in
    let (new-x,new-y) = if next-cr then (0,y + 1) else (x + 1,y) in
    let new-a-list = List.append (List.map (fun t -> (
        let (fx,fy) = t#direction-from in
        let (tx,ty) = t#direction-to in
        (|t with 
          direction-from = (x + fx,y + fy);
          direction-to = (x + tx,y + ty);
        |)
      )) !ref-arrows) a-list
    in
    (new-t-list,new-a-list,(new-x,new-y),next-cr)
  )) ([],[],(0,0),true) lst in
  let metric-list = List.map (fun r -> (
    List.map (fun ib -> get-natural-metrics ib) r
  )) table-list in
  let ver-len = List.length table-list in
  let cell-list = List.mapi (fun vi r -> (
    let hor-len = List.length r in
    List.mapi (fun hi ib -> (
      (
        (if hi == 0 then 0pt else (opts#column-sep *' 0.5)),% left
        (if hi == hor-len - 1 then 0pt else (opts#column-sep *' 0.5)),% right
        (if vi == 0 then 0pt else opts#row-sep),% top
        0pt %bottom
      ),inline-fil ++ ib ++ inline-fil)
    ) r
  )) table-list in
  let horizontal-padding-list = List.map (fun column -> (
    List.map (fun ((p-l,p-r,p-t,p-b),c) -> (p-l,p-r)) column
  )) cell-list in
  let vertical-padding-list = List.map (fun column -> (
    List.map (fun ((p-l,p-r,p-t,p-b),c) -> (p-b,p-t)) column % 値の小さい方を第一成分にする
  )) cell-list in
  tabular (List.map (fun r -> (List.map (fun c -> NormalCell(c))) r) cell-list) (fun xlst ylst -> (
   draw-arrows ctx xlst ylst horizontal-padding-list vertical-padding-list metric-list arrow-list
  ))

let-math \matrixcd ?:opts lst = text-in-math MathOrd (fun ctx -> matrixcd ctx opts lst)
let-math \matrixcd-m ?:opts lst = text-in-math MathOrd (fun ctx -> matrixcd ctx opts lst)
let-inline ctx \matrixcd-t ?:opts lst = matrixcd ctx opts lst


end
