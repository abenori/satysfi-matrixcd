@require: list
@require: base/list-ext
@require: base/length
@require: base/float
@require: base/string
@require: gr
@require: color

module MatrixCD : sig
  type label-option
  type arrow-option
  type matrixcd-option
  val \matrixcd : [(matrixcd-option list)?; int?; math list] math-cmd
  val \matrixcd-t : [(matrixcd-option list)?; int?; math list] inline-cmd
  val \matrixcd-m : [(matrixcd-option list)?; int?; math list] math-cmd
  val \arrow : [arrow-option list] math-cmd
  val \cr : [] math-cmd
  val to : string -> arrow-option
  val to-by-name : string -> arrow-option
  val from : string -> arrow-option
  val from-by-name : string -> arrow-option
  val arrow-out : float -> arrow-option
  val arrow-in : float -> arrow-option
  val bend : float -> arrow-option
  val bend-right : arrow-option
  val bend-left : arrow-option
  val phantom : arrow-option
  val dash : arrow-option
  val imply : arrow-option
  val arrow-color : color -> arrow-option
  val crossing-over : arrow-option
  val dotted : arrow-option
  val dashed : arrow-option
  val mapsto : arrow-option
  val hook : arrow-option
  val hook-swap : arrow-option
  val twoheadrightarrow : arrow-option
  val shift : (length * length) -> arrow-option
  val shift-in : (length * length) -> arrow-option
  val shift-out : (length * length) -> arrow-option
  val label : label-option list ?-> math -> arrow-option
  val label-color : color -> label-option
  val label-name : string -> label-option
  val swap : label-option
  val description : label-option
  val pos : float -> label-option
  val sloped : label-option
  val row-sep : length -> matrixcd-option
  val column-sep : length -> matrixcd-option

end = struct

type position = 
  | Position-Coordinate of int * int
  | Position-Name of string

type label-data = (|
  text : math;
  swap : bool;
  position : float;
  color : color;
  description : bool;
  sloped : bool;
  name: string option;
|)

type label-option = label-data -> label-data
type arrow-angle = 
  |AbsoluteAngle of float
  |RelativeAngle of float

type matrixcd-data = (|
  row-sep : length;
  column-sep : length;
|)
type matrixcd-option = matrixcd-data -> matrixcd-data

type arrow-option-data = (|
  color : color;
  thickness : length;
  angle-in : arrow-angle;
  angle-out : arrow-angle;
  shift : length * length;
  shift-in : length * length;
  shift-out : length * length;
  phantom : bool;
|)

type arrow-shape = 
  | ArrowShape of arrow-option-data -> length * length -> length * length -> context -> graphics list
  | ArrowTailBodyHead of
    (arrow-option-data -> length * length -> length * length -> context -> (length * length) * graphics list) * 
    (arrow-option-data -> length * length -> length * length -> context -> graphics list) *
    (arrow-option-data -> length * length -> length * length -> context -> (length * length) * graphics list)

type arrow-data = (|
  direction-to : position;
  direction-from : position;
  label : label-data list;
  arrow-options : arrow-option-data;
  crossing-over : bool;
  arrow : arrow-shape;
  label-position : arrow-option-data -> length * length -> length * length -> float -> (length * length) * (length * length);
|)

type arrow-option = arrow-data -> arrow-data

% \arrow / \crで指定された内容を一時的に格納する
let-mutable ref-arrows <- []
let-mutable ref-cr <- false

% helpers
let sqrt x =
  let-rec aux y n =
    if n == 0 then y
    else aux ((y +. (x /. y)) *. 0.5) (n - 1)
  in
  aux x 10
let to-radian angle = angle *. 3.14159 /. 180.0
let rotate (x,y) angle = (
  (x *' (cos angle) -' y *' (sin angle)),
  (x *' (sin angle) +' y *' (cos angle))
)

let abs-length a = if a <' 0pt then 0pt -' a else a
let sgn-length a = if a <' 0pt then (0.0-.1.0) else 1.0
let abs-float a = if (1.0pt *' a) <' 0.0pt then 0.0 -. a else a

% drawing arrows
let get-direction-vector angle (startx,starty) (endx,endy) =
  match angle with
  | AbsoluteAngle(a) -> (0.0 -. cos (to-radian a),0.0 -. sin (to-radian a))
  | RelativeAngle(aa) ->
    let a = to-radian aa in
    let x-f = Length.to-float (endx -' startx) in
    let y-f = Length.to-float (endy -' starty) in
    let d = sqrt (x-f *. x-f +. y-f *. y-f) in
    ((x-f /. d) *. (cos a) -. (y-f /. d) *. (sin a),(x-f /. d) *. (sin a) +. (y-f /. d) *. (cos a))

let get-bezier-control-points opt (startx,starty) (endx,endy) =
  let (out-x,out-y) = get-direction-vector opt#angle-out (startx,starty) (endx,endy)  in
  let (in-x,in-y) = get-direction-vector opt#angle-in (startx,starty) (endx,endy)  in
  let x-f = Length.to-float (startx -' endx) in
  let y-f = Length.to-float (starty -' endy) in
  let d = sqrt (x-f *. x-f +. y-f *. y-f) in
  (
    (startx -' 1pt *' (d *. 0.3) *. out-x,starty -' 1pt *' (d *. 0.3) *. out-y),
    (endx -' 1pt *' (d *. 0.3) *. in-x,endy -' 1pt *' (d *. 0.3) *. in-y)
  )

% from standard Gr library
let arrow-tip-from-standard-graphic color lenL lenM lenP (x,y) (dirx,diry) =
  let (cx, cy) = (x -' lenL *' dirx, y -' lenL *' diry) in
  let (mx, my) = (x -' lenM *' dirx, y -' lenM *' diry) in
  let (p1, q1) = (cx +' lenP *' diry, cy -' lenP *' dirx) in
  let (p2, q2) = (cx -' lenP *' diry, cy +' lenP *' dirx) in
  [
    fill color (Gr.polygon (x,y) [(p1, q1); (mx, my); (p2, q2)]);
  ]

% ((x,y),(dirx,diry)): 位置と直線（接線）の方向ベクトル
let normal-label-position opt (startx,starty) (endx,endy) pos =
  let ((ctr1x,ctr1y),(ctr2x,ctr2y)) = get-bezier-control-points opt (startx,starty) (endx,endy) in
  let (p1x,p1y) = (ctr1x *' pos +' startx *' (1.0 -. pos),ctr1y *' pos +' starty *' (1.0 -. pos)) in
  let (p2x,p2y) = (ctr2x *' pos +' ctr1x *' (1.0 -. pos), ctr2y *' pos +' ctr1y *' (1.0 -. pos)) in
  let (p3x,p3y) = (endx *' pos +' ctr2x *' (1.0 -. pos), endy *' pos +' ctr2y *' (1.0 -. pos)) in
  let (p4x,p4y) = (p2x *' pos +' p1x *' (1.0 -. pos),p2y *' pos +' p1y *' (1.0 -. pos)) in
  let (p5x,p5y) = (p3x *' pos +' p2x *' (1.0 -. pos),p3y *' pos +' p2y *' (1.0 -. pos)) in
  let (rx,ry) = (p5x *' pos +' p4x *' (1.0 -. pos),p5y *' pos +' p4y *' (1.0 -. pos)) in
  ((rx,ry),(p5x -' p4x,p5y -' p4y))

let normal-arrow-tail opt startpt endpt ctx = (startpt,[])
let none-arrow-tail = normal-arrow-tail
let mapsto-arrow-tail opt (startx,starty) (endx,endy) ctx =
  let size = 2.5pt in
  let (dirx,diry) = get-direction-vector opt#angle-out (startx,starty) (endx,endy) in
  ((startx,starty),[
    stroke opt#thickness opt#color
      (start-path (startx -' size *' diry, starty +' size *' dirx)
        |> line-to (startx +' size *' diry, starty -' size *' dirx)
        |> terminate-path
      )
  ])
let hook-arrow-tail swap opt (startx,starty) (endx,endy) ctx =
  let radius = 1.5pt in
  let (dirx,diry) = get-direction-vector opt#angle-out (startx,starty) (endx,endy) in
  let (x,y) = (0pt -' radius *' dirx,0pt -' radius *' diry) in
  let (cx,cy) = if swap then (startx +' x  +' y, starty +' y -' x) else (startx +' x  -' y, starty +' y +' x) in
  let (tx,ty) = (x *' 0.55228, y *' 0.55228) in
  let path = start-path (cx +' y,cy -' x)
     |> bezier-to (cx +' y -' tx, cy -' x -' ty) (cx -' x +' ty, cy -' y -' tx) (cx -' x,cy -' y)
     |> bezier-to (cx -' x -' ty,cy -' y +' tx) (cx -' y -' tx,cy +' x -' ty) (cx -' y, cy +' x)
     |> terminate-path
  in
  ((startx +' x,starty +' y),[stroke opt#thickness opt#color path])

let-rec multiple-arrow-head count opt (startx,starty) (endx,endy) ctx = 
  let (x,y) = get-direction-vector opt#angle-in (startx,starty) (endx,endy) in
  let pos = opt#thickness in
  let arstpt =
    if count == 1 then  (endx -' pos *' x,endy -' pos *' y) 
    else (endx -' 2pt *' x,endy -' 2pt *' y)
  in
  let (endpt,g) =
    if count == 1 then (arstpt,[])
    else multiple-arrow-head (count - 1) opt (startx,starty) arstpt ctx
  in
  (arstpt,(List.append g (
    List.append 
      (arrow-tip-from-standard-graphic opt#color 4pt 1pt 4pt (endx,endy) (x,y))
      [stroke opt#thickness opt#color (start-path arstpt |> line-to (endx,endy) |> terminate-path)])))

let normal-arrow-head = multiple-arrow-head 1
let none-arrow-head opt startpt endpt ctx = (endpt,[])
let twoheadrightarrow-arrow-head = multiple-arrow-head 2

let arrow-body-path opt (startx,starty) (endx,endy) ctx =
  let ((ctr1x,ctr1y),(ctr2x,ctr2y)) = get-bezier-control-points opt (startx,starty) (endx,endy) in
  start-path (startx,starty)
    |> bezier-to (ctr1x,ctr1y) (ctr2x,ctr2y) (endx,endy)
    |> terminate-path

let normal-arrow-body opt startpt endpt ctx = [stroke opt#thickness opt#color (arrow-body-path opt startpt endpt ctx)]
let dashed-arrow-body pattern opt startpt endpt ctx = [dashed-stroke opt#thickness pattern opt#color (arrow-body-path opt startpt endpt ctx)]
let none-arrow-body opt startpt endpt ctx = []

let arrow-imply opt (startx,starty) (endx,endy) ctx =
  let (dirx,diry) = get-direction-vector opt#angle-in (startx,starty) (endx,endy) in
  let gr-tip = arrow-tip-from-standard-graphic opt#color 4pt 1pt 4pt (endx,endy) (dirx,diry) in
  let len = 1pt in
  List.append [
    stroke opt#thickness opt#color 
      (Gr.line (startx -' len *' diry,starty +' len *' dirx) (endx -' len *' (dirx +. diry),endy -' len *' (diry -. dirx)));
    stroke opt#thickness opt#color 
      (Gr.line (startx +' len *' diry,starty -' len *' dirx) (endx -' len *' (dirx -. diry),endy -' len *' (diry +. dirx)));
  ] gr-tip

let label ?:option it t = 
  let default-label = (|
    text = it;
    swap = false;
    position = 0.5;
    color = Color.black;
    description = false;
    sloped = false;
    name = None;
  |) in
  let s = Option.from [] option in
  let l = List.fold-left (fun lab f -> (f lab)) default-label s in
  (|t with label = l :: t#label;|)

% options for arrows/labels
% レコードを更新していく形の関数で定める．
let swap t = (|t with swap = true;|)
let pos p t = (|t with position = p;|)
let description t = (|t with description = true;|)
let sloped t = (|t with sloped = true;|)

let-rec analyze-position-aux s def =
  let len = string-length s in
  if len == 0 then def else
    let last-char = string-sub s (len - 1) 1 in
    let (x,y) = analyze-position-aux (string-sub s 0 (len - 1)) def in
    match last-char with
      |`r` -> (x + 1,y)
      |`l` -> (x - 1,y)
      |`d` -> (x,y + 1)
      |`u` -> (x,y - 1)
      |_ -> (x,y)

let analyze-position s def = 
  match def with
  | Position-Name(_) -> (
    let () = abort-with-message `arrow direction is specified by two ways. Plase use only one way.` in
    Position-Coordinate(0,0)
  )
  | Position-Coordinate(x,y) -> (
    let a = analyze-position-aux s (x,y) in
    Position-Coordinate(a)
  )
let to s t = (|t with direction-to = (analyze-position s t#direction-to);|)
let from s t = (|t with direction-from = (analyze-position s t#direction-from);|)
let to-by-name s t = (|t with direction-to = Position-Name(s)|)
let from-by-name s t = (|t with direction-from = Position-Name(s)|)

let arrow-out a t = (|t with arrow-options = (|t#arrow-options with angle-out = AbsoluteAngle(a);|)|)
let arrow-in a t = (|t with arrow-options = (|t#arrow-options with angle-in = AbsoluteAngle(a);|)|)
let bend f t = (|t with arrow-options = (|t#arrow-options with 
  angle-in = RelativeAngle(f);
  angle-out = RelativeAngle(180.0 -. f);
|);|)
let bend-right t = bend 30.0 t
let bend-left t = bend (0.0 -. 30.0) t

let shift p t = (|t with arrow-options = (|t#arrow-options with shift = p;|);|)
let shift-in p t = (|t with arrow-options = (|t#arrow-options with shift-in = p;|);|)
let shift-out p t = (|t with arrow-options = (|t#arrow-options with shift-out = p;|);|)

let phantom t = (|t with 
  arrow = ArrowTailBodyHead(none-arrow-tail,none-arrow-body,none-arrow-head);
  arrow-options = (|t#arrow-options with phantom = true;|)
|)

let crossing-over t = (|t with crossing-over = true;|)
let arrow-color c t = (|t with arrow-options = (|t#arrow-options with color = c;|);|)
let label-color c t = (|t with color = c;|)
let label-name s t = (|t with name = Some(s);|)

let arrow-change-tail t tail body head =
  match t#arrow with
  | ArrowShape(_) -> (|t with arrow = ArrowTailBodyHead(tail,body,head);|)
  | ArrowTailBodyHead(ta,bo,he) -> (|t with arrow = ArrowTailBodyHead(tail,bo,he);|)
let arrow-change-body t tail body head =
  match t#arrow with
  | ArrowShape(_) -> (|t with arrow = ArrowTailBodyHead(tail,body,head);|)
  | ArrowTailBodyHead(ta,bo,he) -> (|t with arrow = ArrowTailBodyHead(ta,body,he);|)
let arrow-change-head t tail body head =
  match t#arrow with
  | ArrowShape(_) -> (|t with arrow = ArrowTailBodyHead(tail,body,head);|)
  | ArrowTailBodyHead(ta,bo,he) -> (|t with arrow = ArrowTailBodyHead(ta,bo,head);|)

let dash t = arrow-change-head t normal-arrow-tail normal-arrow-body none-arrow-head 
let twoheadrightarrow t = arrow-change-head t normal-arrow-tail normal-arrow-body twoheadrightarrow-arrow-head
let dotted t = 
  let tt = arrow-change-body t normal-arrow-tail (fun opt -> dashed-arrow-body (opt#thickness,2pt,0pt) opt) normal-arrow-head in
  (|tt with label-position = normal-label-position;|)
let dashed t = 
  let tt = arrow-change-body t normal-arrow-tail (fun opt -> dashed-arrow-body (1pt,3pt,0pt) opt) normal-arrow-head in
  (|tt with label-position = normal-label-position;|)
let mapsto t = arrow-change-tail t mapsto-arrow-tail normal-arrow-body normal-arrow-head
let hook t = arrow-change-tail t (hook-arrow-tail false) normal-arrow-body normal-arrow-head
let hook-swap t = arrow-change-tail t (hook-arrow-tail true) normal-arrow-body normal-arrow-head
let imply t = (|t with arrow = ArrowShape(arrow-imply);|)

let row-sep l t = (|t with row-sep = l;|)
let column-sep l t = (|t with column-sep = l;|)

let arrow-scheme default opts =
  let r = List.fold-left (fun t f -> (f t)) default opts in
  let aux ctx =
    let () = ref-arrows <- r :: !ref-arrows in
    ${}
  in
  text-in-math MathOrd (fun ctx -> embed-math ctx (aux ctx))

let arrow = arrow-scheme (|
    direction-to = Position-Coordinate(0,0);
    direction-from = Position-Coordinate(0,0);
    label = [];
    arrow-options = (|
      color = Color.black;
      thickness = 0.5pt;
      angle-in = RelativeAngle(0.0);
      angle-out = RelativeAngle(180.0);
      shift = (0pt,0pt);
      shift-in = (0pt,0pt);
      shift-out = (0pt,0pt);
      phantom = false;
    |);
    crossing-over = false;
    arrow = ArrowTailBodyHead(normal-arrow-tail,normal-arrow-body,normal-arrow-head);
    label-position = normal-label-position;
  |)

let-math \arrow opts =
  arrow opts

let-math \cr =
  let aux ctx =
    let () = ref-cr <- true in
    ${}
  in
  text-in-math MathOrd (fun ctx -> embed-math ctx (aux ctx))

let add-to-column obj lst =
  let o = List.last lst in
  let rest = List.init lst in
  let newo = match o with
    | None -> [obj]
    | Some(oo) -> (List.append oo [obj])
  in
  match rest with
    | None -> [newo]
    | Some(r) -> (List.append r [newo])

let add-to-row obj lst = (List.append lst [[obj]])

% (graphics list,priority: int), name-listのペアを返す
let draw-label ctx (posx,posy) (dirx,diry) label arrow-options =
  let font-size = (get-font-size ctx) *' (if arrow-options#phantom then 1.0 else 0.7) in
  let lit = embed-math (ctx
    |> set-font-size font-size
    |> set-text-color label#color
  ) label#text in
  let (width,height,depth) = get-natural-metrics lit in
  let diffx = (if label#swap then (0.0 -. 1.0) else 1.0) *. Length.to-float dirx in
  let diffy = (if label#swap then (0.0 -. 1.0) else 1.0) *. Length.to-float diry in
  let distance = sqrt ((diffx *. diffx) +. (diffy *. diffy)) in
  let (x,y) = % 左下の座標
    if label#description || arrow-options#phantom then
      (posx -' (width *' 0.5), posy -' ((height -' depth) *' 0.5))
    else
      let shiftx = 
        (3pt *' diffy *. (0.0 -. 1.0) *. (1.0 /. distance)) -' (
          if ((not label#swap) && (diry <' 0pt) || ((label#swap) && (diry >' 0pt))) then 0pt
          else width
        )
      in
      let shifty = 
        (3pt *' diffx *. (1.0 /.  distance)) +' (
          if (not label#swap) && (dirx >' 0pt) || ((label#swap) && (dirx <' 0pt)) then depth
          else (0pt -'height)
        )
      in
      % 法線上に中心が来るように
      let a = shiftx +' (width *' 0.5) in
      let b = shifty +' (height -' depth) *' 0.5 in
      let t = 0pt -' ((a *' diffx +' b *' diffy) *' (1.0 /. (distance *. distance))) in
      let adjustx = t *' diffx in
      let adjusty = t *' diffy in
      (posx +' shiftx +' adjustx, posy +' shifty +' adjusty)
  in
  let draw-graphic = [(
    if label#sloped then [
     draw-text (0pt -' (width *' 0.5), (depth -' height) *' 0.5) lit
        |> linear-transform-graphics (diffx /. distance) ((0.0 -. diffy) /. distance) (diffy /. distance) (diffx /. distance)
        |> shift-graphics (x +' (width *' 0.5), y +' ((height -' depth) *' 0.5))
    ] else [draw-text (x,y) lit]
    ,1)]
  in
  let padding = 2pt in
  let description-graphic = [(
    if label#description then
      [fill Color.white (
        start-path (x -' padding, y -' depth -' padding)
          |> line-to (x +' width +' padding, y -' depth -' padding)
          |> line-to (x +' width +' padding, y +' height +' padding)
          |> line-to (x -' padding, y +' height +' padding)
          |> close-with-line
      )]
    else []
    ,1)]
  in
  let (w,h,d) = get-natural-metrics lit in
  let name-lst = 
    match label#name with
    | None -> []
    | Some(s) -> [(s,(x +' width *' 0.5,y +' ((height -' depth) *' 0.5)),(get-natural-metrics lit))]
  in
  (List.append description-graphic draw-graphic,name-lst)

let draw-crossing-over ctx (startx,starty) (endx,endy) =
  let x-f = Length.to-float (endx -' startx) in
  let y-f = Length.to-float (endy -' starty) in
  let d = sqrt ((x-f *. x-f) +. (y-f *. y-f)) in
  let (startx1,starty1) = (startx +' 3pt *' ((0.0 -. y-f) *. (1.0 /. d)), starty +' 3pt *' (x-f *. (1.0 /. d))) in
  let (startx2,starty2) = (startx +' 3pt *' (y-f *. (1.0 /. d)), starty +' 3pt *' ((0.0 -. x-f) *. (1.0 /. d))) in
  let (endx1,endy1) = (endx +' 3pt *' ((0.0 -. y-f) *. (1.0 /. d)), endy +' 3pt *' (x-f *. (1.0 /. d))) in
  let (endx2,endy2) = (endx +' 3pt *' (y-f *. (1.0 /. d)), endy +' 3pt *' ((0.0 -. x-f) *. (1.0 /. d))) in
  [fill Color.white (
    start-path (startx1,starty1) 
      |> line-to (startx2,starty2)
      |> line-to (endx2,endy2)
      |> line-to (endx1,endy1)
      |> close-with-line
  )]

type boundary-pos = Left | Right | Top | Bottom
let get-boundary-point x y leftx rightx bottomy topy (dirx,diry) =
  let dirx-f = Length.to-float dirx in
  let diry-f = Length.to-float diry in
  let d = sqrt (dirx-f *. dirx-f +. diry-f *. diry-f) in
  if Length.(dirx == 0pt) then 
    if diry >' 0pt then (x,topy)
    else (x,bottomy)
  else if Length.(diry == 0pt) then
    if dirx >' 0pt then (rightx,y)
    else (leftx,y)
  else
    % dirx != 0pt, diry != 0pt
    let dir-slope = diry /' dirx in
    let pos = 
      if dirx >' 0pt && diry >' 0pt then
        let slope = (topy -' y) /' (rightx -' x) in
        if Float.(dir-slope > slope) then Top
        else Right
      else if dirx >' 0pt && diry <' 0pt then
        let slope = (bottomy -' y) /' (rightx -' x) in
        if Float.(dir-slope > slope) then Right
        else Bottom
      else if dirx <' 0pt && diry >' 0pt then
        let slope = (topy -' y) /' (leftx -' x) in
        if Float.(dir-slope > slope) then Left
        else Top
      else
        let slope = (bottomy -' y) /' (leftx -' x) in
        if Float.(dir-slope > slope) then Bottom
        else Left
    in
    match pos with
    | Left -> (leftx, y +' (leftx -' x) *' dir-slope)
    | Right -> (rightx, y +' (rightx -' x) *' dir-slope)
    | Top -> ((topy -' y) *' (1.0 /. dir-slope) +' x,topy)
    | Bottom -> ((bottomy -' y) *' (1.0 /. dir-slope) +' x,bottomy)

let get-source-target
  ((from-x,from-y),(from-width,from-height,from-depth)) from-angle
  ((to-x,  to-y)  ,(to-width,  to-height,  to-depth  )) to-angle =
  let object-margin = 5pt in
  let from-left = from-x -' (from-width *' 0.5) in
  let from-right = from-x +' (from-width *' 0.5) in
  let to-left = to-x -' (to-width *' 0.5) in
  let to-right = to-x +' (to-width *' 0.5) in
  let from-top = from-y +' from-height in
  let from-bottom = from-y -' from-depth in
  let to-top = to-y +' to-height in
  let to-bottom = to-y -' to-depth in
  let direction-vector = (from-x -' to-x, (from-top +' from-bottom) *' 0.5 -' (to-top +' to-bottom) *' 0.5) in
  let direction-out = 
    match from-angle with
    | RelativeAngle(a) -> rotate direction-vector (to-radian a)
    | AbsoluteAngle(a) -> (1pt *' cos (to-radian a),1pt *' sin (to-radian a))
  in
  let direction-in = 
    match to-angle with
    | RelativeAngle(a) -> rotate direction-vector (to-radian a)
    | AbsoluteAngle(a) -> (1pt *' cos (to-radian a),1pt *' sin (to-radian a))
  in
  let (arrow-start-x,arrow-start-y) = 
    get-boundary-point
      from-x ((from-top +' from-bottom) *' 0.5)
      (from-left -' object-margin) (from-right +' object-margin)
      (from-bottom -' object-margin) (from-top +' object-margin)
      direction-out
  in
  let (arrow-end-x,arrow-end-y) = 
    get-boundary-point
      to-x ((to-top +' to-bottom) *' 0.5)
      (to-left -' object-margin) (to-right +' object-margin)
      (to-bottom -' object-margin) (to-top +' object-margin)
      direction-in
  in
  ((arrow-start-x,arrow-start-y),(arrow-end-x,arrow-end-y))


% 横方向みたいな変数名……
let get-center coordlist padding index = 
  let left-c = Option.from 0pt (List.nth index coordlist) in
  let right-c = Option.from 0pt (List.nth (index + 1) coordlist) in
  let (left-p,right-p) = padding in
  ((left-c +' left-p) *' 0.5) +' ((right-c -' right-p) *' 0.5)

let get-metric-from-list x y metric-list =
  match (List.nth y metric-list) with
  |None -> None
  |Some(c) -> (List.nth x c)

% arrowなどの描画用データ．場所の名前解決があるので一気には描画できない．
% できるものを処理し，その処理の過程で得られた場所と名前の組をもとに新たな描画を行う．
% BeforeDrawが描画前のデータ，AfterDrawが描画されたgraphics list．
type gr-data =
  | BeforeDraw of 
    % context, source, targeを取得し，((graphics list,priority)のリスト,名前のリスト)を返す．
    % 名前のリストは(名前,位置,対象の(横幅,高さ,深さ))
    (context -> (length*length) -> (length*length) -> (
      ((graphics list) * int) list * (string*(length*length)*(length*length*length))list
    ))
    * (position * arrow-angle) * (position * arrow-angle)
  | AfterDraw of (graphics list * int)


let arrow-list-to-graphic-list arrow-data =
  let gr-func ctx (startx,starty) (endx,endy) =
    let (start-shiftx,start-shifty) = arrow-data#arrow-options#shift-out in
    let (end-shiftx,end-shifty) = arrow-data#arrow-options#shift-in in
    let startpt = (startx +' start-shiftx,starty +' start-shifty) in
    let endpt = (endx +' end-shiftx,endy +' end-shifty) in
    let arrow-graphics =
      let gr = 
        match arrow-data#arrow with
        | ArrowShape(body) -> 
          body arrow-data#arrow-options startpt endpt ctx
        | ArrowTailBodyHead(t,b,h) -> (
          let (tailpt,tailgr) = t arrow-data#arrow-options startpt endpt ctx in
          let (headpt,headgr) = h arrow-data#arrow-options startpt endpt ctx in
          let bodygr = b arrow-data#arrow-options tailpt headpt ctx in
          let a = List.append tailgr headgr in
          List.append a bodygr
        )
      in
      [(
        gr,
        if arrow-data#crossing-over then 3 else 0
      )]
    in
    let crossing-over-graphics = 
      if arrow-data#crossing-over then [(draw-crossing-over ctx startpt endpt ,2)]
      else []
    in
    let (label-graphics,name-list) = List.fold-left 
      (fun (lst,nplst) l -> (
        let (pospt,dir) = arrow-data#label-position arrow-data#arrow-options startpt endpt l#position in
        let (gr,namepos) = draw-label ctx pospt dir l arrow-data#arrow-options in
        (
          (List.append gr lst),
          (List.append namepos nplst)
        )
      ))
    ([],[]) arrow-data#label in
    (
      (List.map (fun (g,n) -> (List.map (shift-graphics arrow-data#arrow-options#shift) g,n))
        (List.append (List.append crossing-over-graphics arrow-graphics) label-graphics)),
      name-list
    )
  in
  BeforeDraw(gr-func,
    (arrow-data#direction-from,arrow-data#arrow-options#angle-out),
    (arrow-data#direction-to,arrow-data#arrow-options#angle-in)
  )

% 射の情報から，((fun ctx from to -> ((graphics list,priority),name-popsition-list)),from,to)のリストを作る
% name-position-listは{name: string,position: length*length]のリスト
let arrow-list-to-graphic-funcs-pos arrow-list =
  List.fold-left (fun lst t -> (
    List.append lst [(arrow-list-to-graphic-list t)]
  )) [] arrow-list


% 処理手順
% 射の情報から，((fun ctx from to -> (graphics list,priority,name-popsition-list)),from,to)のリストを作る
% name-position-listは(name: string,position: length*length,size: length*length*length)のリスト
% 名前がついた場所（ラベル）の中心点と(width,height,depth)を示す．
let get-position-function coordxlist coordylist hor-padding-list ver-padding-list metric-list name-list pos =
  match pos with
  | Position-Name(name) -> (
    match List.find (fun (str,_,_) -> (string-same str name)) name-list with
    | None -> None
    | Some(s,a,b) -> Some(a,b)
  )
  | Position-Coordinate(x,y) -> (
    let get-padding-from-list p-list x y =
      Option.from (0pt,0pt) (List.nth x (
        Option.from [] (List.nth y p-list)
      ))
    in
    let (width,ht,dp) = Option.from (0pt,0pt,0pt) (get-metric-from-list x y metric-list) in
    let height = ht +' dp in
    let centerx = get-center coordxlist (get-padding-from-list hor-padding-list x y) x in
    let p-list = List.map (fun (a,_) -> a) (Option.from [] (List.nth y ver-padding-list)) in
    let dep-list = List.map (fun (_,_,d) -> d) (Option.from [] (List.nth y metric-list)) in
    let-rec aux n bl =
      match (List.nth n p-list) with
      | None -> bl
      | Some(pad) -> (
        match (List.nth n dep-list) with
        | None -> bl
        | Some(dep) -> (
          let tmpbl = pad +' dep in
          aux (n + 1) (
            if Length.(tmpbl > bl) then tmpbl else bl
          )
        )
      )
    in
    let baseline = (aux 0 0pt) +' (Option.from 0pt (List.nth (y + 1) coordylist)) in
    Some((centerx,baseline),(width,ht,dp))
  )

let-rec draw-arrows-aux ctx position target-list name-list =
  % drawed: 描画が今回行われた（リストが更新された）
  let (new-target-list,new-name-list,drawed,done) =
    List.fold-left (fun (tlst,nlst,drwd,don) target -> (
      match target with
      | AfterDraw(gr) -> (List.cons (AfterDraw(gr)) tlst,nlst,drwd,don)
      | BeforeDraw(gr-func,(from,from-angle),(to,to-angle)) -> (
        match position name-list from with
        | None -> (List.cons (BeforeDraw(gr-func,(from,from-angle),(to,to-angle))) tlst,nlst,drwd,false)
        | Some(from-pos) ->(
          match position name-list to with 
          | None -> (List.cons (BeforeDraw(gr-func,(from,from-angle),(to,to-angle))) tlst,nlst,drwd,false)
          | Some(to-pos) -> (
            let (arrow-from,arrow-to) = get-source-target from-pos from-angle to-pos to-angle in
            let (cur-grs,cur-nl) = gr-func ctx arrow-from arrow-to in
            (
              List.append (List.map (fun (a,b) -> AfterDraw(a,b)) cur-grs) tlst,
              List.append nlst cur-nl,true,don
            )
          )
        )
      )
    )) ([],[],false,true) target-list
  in
  if done then List.fold-left (fun gt g -> (
    match g with 
    | BeforeDraw(a,b,c) -> (
      let () = abort-with-message `unexpected BeforeDraw, a bug` in
      []
    )
    | AfterDraw(gr) -> List.cons gr gt
  )) [] new-target-list 
  else 
    if drawed then draw-arrows-aux ctx position new-target-list new-name-list
    else (
      let () = abort-with-message `failed to resolve names` in
      []
    )

let draw-arrows ctx coordxlist coordylist hor-padding-list ver-padding-list metric-list arrow-list =
  let target-list = arrow-list-to-graphic-funcs-pos arrow-list in
  let object-margin = 5pt in
  let position = get-position-function coordxlist coordylist hor-padding-list ver-padding-list metric-list in
  let gr-list = draw-arrows-aux ctx position target-list [] in
  let compare-func (x,a) (y,b) =
    if a > b then Gt
    else if a < b then Lt
    else Eq
  in
  List.reverse (List.fold-left (fun l (g,n) -> (List.append g l)) [] (List.bubblesort (Ord.make compare-func) gr-list))


%%%%%%%%%%%%%%%%%%%%%%%%%%

let get-referenced-size s =
  match get-cross-reference s with
  | None -> 0pt
  | Some(sl) -> (
    match Float.of-string-opt sl with
    | None -> 0pt
    | Some(f) -> 1pt *' f
  )

let-mutable ref-matrixcd-count <- 0
let get-matrixcd-reference-name s = `MatrixCD-matrixcd-count-` ^ s ^ `: ` ^ (arabic !ref-matrixcd-count)

let matrixcd ctx os linecnt lst =
  let () = ref-matrixcd-count <- !ref-matrixcd-count + 1 in
  let default-options = (|
    row-sep = 40pt;
    column-sep = 40pt;
  |) in
  let opts = List.fold-left (fun t f -> (f t)) default-options (Option.from [] os) in
  let (table-list,arrow-list,_,_) = List.fold-left (fun (t-list,a-list,(x,y),cr) it -> (
    let () = ref-arrows <- [] in
    let () = ref-cr <- false in 
    let ib = embed-math ctx it in
    let next-cr =
      if !ref-cr then true
      else match linecnt with
        | None -> false
        | Some(cnt) -> (
          if (x + 1) == cnt then true
          else false
        )
    in
    let new-t-list =
      if cr then (add-to-row ib t-list)
      else (add-to-column ib t-list)
    in
    let (new-x,new-y) = if next-cr then (0,y + 1) else (x + 1,y) in
    let shift-coordinate pos (x,y) =
      match pos with
      |Position-Name(s) -> Position-Name(s)
      |Position-Coordinate(fx,fy) -> Position-Coordinate(x + fx,y + fy)
    in
    let new-a-list = List.append (List.map (fun t -> (
        (|t with 
          direction-from = shift-coordinate t#direction-from (x,y);
          direction-to = shift-coordinate t#direction-to (x,y)
        |)
      )) !ref-arrows) a-list
    in
    (new-t-list,new-a-list,(new-x,new-y),next-cr)
  )) ([],[],(0,0),true) lst in
  let metric-list = List.map (List.map get-natural-metrics) table-list in
  let ver-len = List.length table-list in
  let hor-len = List.fold-left (fun mx c ->(
    let cur-len = List.length c in
    if cur-len > mx then cur-len else mx
  )) 0 table-list in
  let refname-l = get-matrixcd-reference-name `left` in
  let refname-r = get-matrixcd-reference-name `right` in
  let refname-t = get-matrixcd-reference-name `top` in
  let refname-b = get-matrixcd-reference-name `bottom` in
  let size-l = get-referenced-size refname-l in
  let size-r = get-referenced-size refname-r in
  let size-t = get-referenced-size refname-t in
  let size-b = get-referenced-size refname-b in

  let cell-list = List.mapi (fun vi r -> (
    List.mapi (fun hi ib -> (
      (
        (if hi == 0 then size-l else (opts#column-sep *' 0.5)),% left
        (if hi == hor-len - 1 then size-r else (opts#column-sep *' 0.5)),% right
        (if vi == 0 then size-t else (opts#row-sep *' 0.5)),% top
        (if vi == ver-len - 1 then size-b else (opts#row-sep *' 0.5)) %bottom
      ),inline-fil ++ ib ++ inline-fil)
    ) r
  )) table-list in
  let horizontal-padding-list = List.map (fun column -> (
    List.map (fun ((p-l,p-r,p-t,p-b),c) -> (p-l,p-r)) column
  )) cell-list in
  let vertical-padding-list = List.map (fun column -> (
    List.map (fun ((p-l,p-r,p-t,p-b),c) -> (p-b,p-t)) column % 値の小さい方を第一成分にする
  )) cell-list in
  tabular (List.map (List.map (fun c -> NormalCell(c))) cell-list) (fun xlst ylst -> (
    let gr = draw-arrows ctx xlst ylst horizontal-padding-list vertical-padding-list metric-list arrow-list in
    let left = (Option.from 0pt (List.head xlst) +' size-l) in
    let right = (Option.from 0pt (List.last xlst) -' size-r)  in
    let top = (Option.from 0pt (List.head ylst)  -' size-t) in
    let bottom = (Option.from 0pt (List.last ylst) +' size-b) in
    let (p-l,p-r,p-t,p-b) = List.fold-left (fun (l,r,t,b) g -> (
      let ((bbminx,bbminy),(bbmaxx,bbmaxy)) = get-graphics-bbox g in
      (
        (if bbminx <' l then bbminx else l),
        (if bbmaxx >' r then bbmaxx else r),
        (if bbmaxy >' t then bbmaxy else t),
        (if bbminy <' b then bbminy else b)
      )
    )) (left,right,top,bottom) gr in
    let () = register-cross-reference refname-l (Float.to-string (Length.to-float (p-l -' left) )) in
    let () = register-cross-reference refname-r (Float.to-string (Length.to-float (right -' p-r))) in
    let () = register-cross-reference refname-t (Float.to-string (Length.to-float (p-t -' top))) in
    let () = register-cross-reference refname-b (Float.to-string (Length.to-float (bottom -' p-b))) in
    gr
%    let xmin = Option.from 0pt (List.head xlst) in
%    let xmax = Option.from 0pt (List.last xlst) in
%    let ymin = Option.from 0pt (List.head ylst) in
%    let ymax = Option.from 0pt (List.last ylst) in
%    List.append gr (List.append
%      (List.map (fun x -> (stroke 1pt Color.black (start-path (x,ymin) |> line-to (x,ymax) |> terminate-path))) xlst)
%      (List.map (fun y -> (stroke 1pt Color.black (start-path (xmin,y) |> line-to (xmax,y) |> terminate-path))) ylst)
%    )
  ))

let-math \matrixcd ?:opts ?:linecnt lst = text-in-math MathOrd (fun ctx -> matrixcd ctx opts linecnt lst)
let-math \matrixcd-m ?:opts ?:linecnt lst = text-in-math MathOrd (fun ctx -> matrixcd ctx opts linecnt lst)
let-inline ctx \matrixcd-t ?:opts ?:linecnt lst = matrixcd ctx opts linecnt lst


end
